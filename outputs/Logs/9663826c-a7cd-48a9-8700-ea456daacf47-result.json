{"name": "正常登录", "status": "failed", "statusDetails": {"message": "AssertionError: 第1个断言失败, 实际结果: None, 预期结果: 200, 断言方式: eq", "trace": "res = <Response [200]>, expected = {'eq': {'$.code': '200', '$.result': 'ok'}}\n\n    def assert_result(res, expected):\n    \n        if expected is None:\n            logger.info(f\"当前用例无断言\")\n            return\n    \n        if isinstance(expected, str):\n            expected_dict = eval(expected)\n        else:\n            expected_dict = expected\n    \n        index = 0\n        for k, v in expected_dict.items():\n            for _k, _v in v.items():\n                if _k == \"http_code\":\n                    actual = res.status_code\n                else:\n                    if response_type(res) == \"json\":\n                        actual = json_extract(res.json(), _k)\n                    else:\n                        actual = re_extract(res.text, _k)\n    \n                index += 1\n                logger.info(f\"第{index}断言数据, 实际结果:{actual}, 预期结果: {_v}, 断言方式：{k}\")\n    \n                try:\n                    if k == \"eq\":\n>                       assert actual == _v\nE                       AssertionError\n\ncommon_utils\\assert_util.py:46: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_demo.TestLogin object at 0x0000014DC93108B0>\ndata = {'data': {'app_uuid': '10000000002527', 'cellphone': '0911223344'}, 'extract': {'access_token': '$.message.access_token', 'token_type': '$.message.token_type'}, 'feature': '登录', 'file': None, ...}\n\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.parametrize(\"data\", ExcelHandle(data_path + \"test_case.xlsx\").read_excel())\n    def test_login(self, data):\n        allure_title(\"正常登录\")\n        print(data)\n        print('sssss')\n        # data = {\n        #     \"title\": \"正常登录\",\n        #     \"url\": \"bank/api/login\",\n        #     \"method\": \"post\",\n        #     \"pk\": \"data\",\n        #     \"data\": {\"password\": \"123456\", \"userName\": \"king\"}\n        # }\n        #\n        # expected = {\n        #     'eq': {'$.code': '0', '$.message': 'success'}\n        # }\n        # 发送请求\n        response = BaseRequest.send_request(data)\n        # 断言操作\n>       assert_result(response, data[\"validate\"])\n\ntest_case\\test_demo.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [200]>, expected = {'eq': {'$.code': '200', '$.result': 'ok'}}\n\n    def assert_result(res, expected):\n    \n        if expected is None:\n            logger.info(f\"当前用例无断言\")\n            return\n    \n        if isinstance(expected, str):\n            expected_dict = eval(expected)\n        else:\n            expected_dict = expected\n    \n        index = 0\n        for k, v in expected_dict.items():\n            for _k, _v in v.items():\n                if _k == \"http_code\":\n                    actual = res.status_code\n                else:\n                    if response_type(res) == \"json\":\n                        actual = json_extract(res.json(), _k)\n                    else:\n                        actual = re_extract(res.text, _k)\n    \n                index += 1\n                logger.info(f\"第{index}断言数据, 实际结果:{actual}, 预期结果: {_v}, 断言方式：{k}\")\n    \n                try:\n                    if k == \"eq\":\n                        assert actual == _v\n                    elif k == \"gt\":   # 大于\n                        assert actual > _v\n                    elif k == \"lt\":   # 小于\n                        assert actual > _v\n                    elif k == \"not\":\n                        assert actual != _v\n                    elif k == \"in\":\n                        assert _v in actual\n                    else:\n                        logger.exception(f\"判断关键字：{k}错误\")\n                except AssertionError as e:\n>                   raise AssertionError(f\"第{index}个断言失败, 实际结果: {actual}, 预期结果: {_v}, 断言方式: {k}\")\nE                   AssertionError: 第1个断言失败, 实际结果: None, 预期结果: 200, 断言方式: eq\n\ncommon_utils\\assert_util.py:58: AssertionError"}, "attachments": [{"name": "log", "source": "66535f0a-9528-4126-aafd-d8d2ead21de5-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'id': 'case_001', 'feature': '登录', 'title': '正确密码登录', 'url': 'api/v1/app/authorization', 'header': '{\"uid\": \"10000000002527\",\"apply-secret\":\"base64:szoJ3mSx/5U7zOsJfU7s4pSahiwdh01x6badmz5FtCM=\",\"Content-type\":\"application/json\"}', 'method': 'post', 'pk': 'json', 'data': '\\n{\"app_uuid\": \"10000000002527\",\\n \"cellphone\": \"0911223344\"}', 'file': None, 'extract': '{\"token_type\": \"$.message.token_type\",\\n   \"access_token\": \"$.message.access_token\"}', 'validate': '{\"eq\": {\\n  \"$.code\": \"200\",\\n  \"$.result\": \"ok\"}}'}"}], "start": 1658746487372, "stop": 1658746487901, "uuid": "522ef029-04b8-4010-9cdc-09664f6508d7", "historyId": "9babae84909f7ac1f691eb0663ea13df", "testCaseId": "1090d921a3f660110695a866e18ec840", "fullName": "test_case.test_demo.TestLogin#test_login", "labels": [{"name": "feature", "value": "登录"}, {"name": "severity", "value": "blocker"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_demo"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "PA2022060178"}, {"name": "thread", "value": "15868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_demo"}]}